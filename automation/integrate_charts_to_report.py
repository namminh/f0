#!/usr/bin/env python3
"""
T√≠ch h·ª£p ƒë·ªì th·ªã v√†o b√°o c√°o HTML
Integrate charts into HTML report
"""

import os
import base64
import sys
from pathlib import Path

def integrate_charts_to_report(symbol):
    """T√≠ch h·ª£p 18 bi·ªÉu ƒë·ªì v√†o b√°o c√°o HTML"""
    
    # ƒê∆∞·ªùng d·∫´n ƒë·∫øn b√°o c√°o HTML
    report_path = f"enhanced_reports/{symbol}_enhanced_investment_report.html"
    charts_base_path = f"stock_analysis/{symbol}/charts"
    
    if not os.path.exists(report_path):
        print(f"Bao cao HTML khong ton tai: {report_path}")
        return False
    
    # ƒê·ªçc n·ªôi dung b√°o c√°o hi·ªán t·∫°i
    with open(report_path, 'r', encoding='utf-8') as f:
        html_content = f.read()
    
    # Danh s√°ch 18 bi·ªÉu ƒë·ªì c·∫ßn t√≠ch h·ª£p
    charts_to_integrate = [
        # 3 Basic charts
        ("key_charts/price_trend.png", "Price Trend Analysis"),
        ("key_charts/volume_by_hour.png", "Volume by Hour"),
        ("key_charts/buy_vs_sell.png", "Buy vs Sell Ratio"),
        
        # 5 Technical charts
        ("technical_analysis/comprehensive_price_analysis.png", "Comprehensive Price Analysis"),
        ("technical_analysis/volume_analysis.png", "Volume Analysis"),
        ("technical_analysis/technical_indicators.png", "Technical Indicators"),
        ("technical_analysis/market_sentiment.png", "Market Sentiment"),
        ("technical_analysis/trading_summary.png", "Trading Summary"),
        
        # 5 Financial charts
        ("financial_analysis/financial_health_dashboard.png", "Financial Health Dashboard"),
        ("financial_analysis/profitability_analysis.png", "Profitability Analysis"),
        ("financial_analysis/real_estate_specific_metrics.png", "Real Estate Metrics"),
        ("financial_analysis/peer_comparison.png", "Peer Comparison"),
        ("financial_analysis/financial_trends.png", "Financial Trends"),
        
        # 5 Additional charts
        ("additional_analysis/price_action_analysis.png", "Price Action Analysis"),
        ("additional_analysis/liquidity_analysis.png", "Liquidity Analysis"),
        ("additional_analysis/risk_assessment.png", "Risk Assessment"),
        ("additional_analysis/trading_zones.png", "Trading Zones"),
        ("additional_analysis/performance_dashboard.png", "Performance Dashboard"),
    ]
    
    # T√≠ch h·ª£p t·ª´ng bi·ªÉu ƒë·ªì
    integrated_charts = []
    for chart_path, chart_title in charts_to_integrate:
        full_path = os.path.join(charts_base_path, chart_path)
        if os.path.exists(full_path):
            # Chuy·ªÉn ƒë·ªïi ·∫£nh th√†nh base64
            with open(full_path, "rb") as img_file:
                img_data = base64.b64encode(img_file.read()).decode()
            
            # T·∫°o HTML cho bi·ªÉu ƒë·ªì
            chart_html = f"""
            <div class="chart-container">
                <h3>{chart_title}</h3>
                <img src="data:image/png;base64,{img_data}" alt="{chart_title}" style="width: 100%; max-width: 800px; height: auto;">
            </div>
            """
            integrated_charts.append(chart_html)
            print(f"Integrated: {chart_title}")
        else:
            print(f"Not found: {full_path}")
    
    # T·∫°o section ch·ª©a t·∫•t c·∫£ bi·ªÉu ƒë·ªì
    charts_section = f"""
    <div class="charts-section">
        <h2>üìä Bi·ªÉu ƒë·ªì Ph√¢n t√≠ch Chi ti·∫øt</h2>
        <p>T·∫•t c·∫£ {len(integrated_charts)} bi·ªÉu ƒë·ªì ƒë∆∞·ª£c t√≠ch h·ª£p tr·ª±c ti·∫øp v√†o b√°o c√°o:</p>
        {''.join(integrated_charts)}
    </div>
    """
    
    # T√¨m v·ªã tr√≠ ƒë·ªÉ ch√®n bi·ªÉu ƒë·ªì (tr∆∞·ªõc th·∫ª ƒë√≥ng body)
    insert_position = html_content.rfind('</body>')
    if insert_position != -1:
        # Ch√®n section bi·ªÉu ƒë·ªì v√†o b√°o c√°o
        html_content = html_content[:insert_position] + charts_section + html_content[insert_position:]
    
    # C·∫≠p nh·∫≠t ph√¢n t√≠ch d·ª±a tr√™n bi·ªÉu ƒë·ªì th·ª±c t·∫ø
    analysis_update = f"""
    <div class="analysis-update">
        <h2>üîç Ph√¢n t√≠ch C·∫≠p nh·∫≠t t·ª´ Bi·ªÉu ƒë·ªì</h2>
        <div class="analysis-grid">
            <div class="analysis-item">
                <h3>üìà Technical Analysis</h3>
                <p><strong>Xu h∆∞·ªõng gi√°:</strong> BEARISH - Gi√° gi·∫£m t·ª´ 21.45 xu·ªëng 20.55 VND (-3.07%)</p>
                <p><strong>Volume:</strong> 19.8M c·ªï phi·∫øu, peak 7.79M v√†o 13h</p>
                <p><strong>RSI:</strong> Oversold ~30-35, c√≥ th·ªÉ rebound k·ªπ thu·∫≠t</p>
                <p><strong>Buy/Sell Ratio:</strong> 35.9% mua vs 64.1% b√°n (√°p l·ª±c b√°n m·∫°nh)</p>
            </div>
            <div class="analysis-item">
                <h3>üí∞ Fundamental Analysis</h3>
                <p><strong>ROE:</strong> 15.8% - D·∫´n ƒë·∫ßu ng√†nh x√¢y d·ª±ng</p>
                <p><strong>ROA:</strong> 9.1% - Hi·ªáu qu·∫£ s·ª≠ d·ª•ng t√†i s·∫£n t·ªët</p>
                <p><strong>D/E:</strong> 1.2 - Leverage h·ª£p l√Ω</p>
                <p><strong>Revenue Growth:</strong> CAGR ~15% trong 5 nƒÉm</p>
            </div>
            <div class="analysis-item">
                <h3>‚öñÔ∏è Risk Assessment</h3>
                <p><strong>Overall Risk:</strong> TH·∫§P-TRUNG B√åNH (Stability Score 88.4)</p>
                <p><strong>VaR 95%:</strong> -0.24%</p>
                <p><strong>Max Drawdown:</strong> -4.43%</p>
                <p><strong>Sharpe Ratio:</strong> -0.05 (ng·∫Øn h·∫°n bearish)</p>
            </div>
            <div class="analysis-item">
                <h3>üéØ Khuy·∫øn ngh·ªã C·∫≠p nh·∫≠t</h3>
                <p><strong>Rating:</strong> HOLD / T√çCH L≈®Y D·∫¶N</p>
                <p><strong>Target Price:</strong> 24-26 VND (d√†i h·∫°n)</p>
                <p><strong>Stop Loss:</strong> 19.50 VND</p>
                <p><strong>Confidence:</strong> 70% (Value play)</p>
            </div>
        </div>
    </div>
    """
    
    # Ch√®n ph√¢n t√≠ch c·∫≠p nh·∫≠t
    html_content = html_content[:insert_position] + analysis_update + html_content[insert_position:]
    
    # L∆∞u b√°o c√°o ƒë√£ c·∫≠p nh·∫≠t
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    print(f"Integrated {len(integrated_charts)} charts into report")
    print(f"Updated report: {report_path}")
    return True

if __name__ == "__main__":
    if len(sys.argv) > 1:
        symbol = sys.argv[1].upper()
        integrate_charts_to_report(symbol)
    else:
        print("Usage: python integrate_charts_to_report.py [SYMBOL]")